/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import at.bxm.gradleplugins.svntools.tasks.SvnCheckout
import org.apache.commons.io.FileUtils
import org.apache.ivy.util.url.ApacheURLLister

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.ivy:ivy:2.3.0'
        classpath 'commons-io:commons-io:2.6'
    }
}

plugins {
    id "de.undercouch.download" version "3.4.3"
    id "at.bxm.svntools" version "2.2.1"
    id "com.github.dkorotych.gradle-maven-exec" version "2.0"
}

apply plugin: 'base'

def taskGroup = 'Release Verification'
def verificationDir = mkdir("$buildDir/release-verification")
def distDir = mkdir("$verificationDir/dist")
def releaseTagDir = mkdir("$verificationDir/tag")
def component = distArea.split('/')[-1]

task downloadReleaseNotes(type: Download) {
    group = taskGroup
    description = 'Downloads the RELEASE-NOTES.txt file'
    src "$distArea/RELEASE-NOTES.txt"
    dest distDir
}

task downloadSource(type: Download) {
    group = taskGroup
    description = 'Downloads the source artifacts'
    src listFiles("$distArea/source")
    dest mkdir("$distDir/source")
}

task downloadBinaries(type: Download) {
    group = taskGroup
    description = 'Downloads the binary artifacts'
    src listFiles("$distArea/binaries")
    dest mkdir("$distDir/binaries")
}

task downloadDistArtifacts(dependsOn: [downloadReleaseNotes, downloadSource, downloadBinaries]) {
    group = taskGroup
    description = 'Downloads all artifacts from the distribution area'
}

task extractSourceArchive(type: Copy, dependsOn: downloadSource) {
    group = taskGroup
    description = 'Extracts the source archive'

    def sourceArchive = file("$distDir/source/").listFiles().findAll { File f -> f.name.endsWith('-src.tar.gz') }.first()

    from tarTree(resources.gzip(sourceArchive))
    into "$verificationDir/sourceArchiveContents"
}

task buildFromSource(type: MavenExec, dependsOn: extractSourceArchive) {
    group taskGroup
    description = 'Build from dist area source'

    goals 'clean', 'verify'
    workingDir file("$verificationDir/sourceArchiveContents").listFiles().first();
}

task checkoutSvnReleaseTag(type: SvnCheckout) {
    group taskGroup
    description = 'Checks out the SVN release tag'
    svnUrl = tag
    workspaceDir = releaseTagDir
}

task compareReleaseNotes(dependsOn: [downloadReleaseNotes, checkoutSvnReleaseTag]) {
    group taskGroup
    description = 'Compares RELEASE-NOTES.txt from the dist area with those from the release tage'
    doLast {
        def distReleaseNotes = file("$distDir/RELEASE-NOTES.txt")
        def tagReleaseNotes = file("$releaseTagDir/RELEASE-NOTES.txt")
        def releaseNotesEqual = FileUtils.contentEquals(distReleaseNotes, tagReleaseNotes)
        if (!releaseNotesEqual) {
            throw new GradleException("RELEASE-NOTES.txt from release tag and dist area are not the same!");
        }
    }
}

task verifyRelease(dependsOn: [downloadDistArtifacts, compareReleaseNotes, buildFromSource]) {
    group = taskGroup
    description = 'Executes the whole release verification logic'
}

def static listFiles(String url) {
    def urlLister = new ApacheURLLister()
    return urlLister.listFiles(new URL(url))
}
